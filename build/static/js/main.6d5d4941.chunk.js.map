{"version":3,"sources":["packages/rich-text-editor/src/index.ts","packages/rich-text-editor/src/components/rich-text-editor/index.tsx","App.js","reportWebVitals.js","index.js"],"names":["RichTextEditor","useState","value","setValue","reactQuillRef","useRef","handleGetHTML","useCallback","e","html","clipboard","Clipboard","text","on","message","success","destroy","error","handleChange","val","className","id","style","marginBottom","type","onClick","display","ref","theme","onChange","TabPane","Tabs","App","key","setKey","defaultActiveKey","tab","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","Suspense","document","getElementById"],"mappings":"sVACeA,MCQA,WACX,MAA0BC,mBAAiB,IAA3C,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAgBC,iBAAY,MAC5BC,EAAgBC,uBAAY,SAACC,GAE/B,IAAIC,EAAY,iGAGdP,EAHc,oCAMZQ,EAAY,IAAIC,IAAU,YAAa,CACvCC,KAAM,WACF,OAAOH,KAGfC,EAAUG,GAAG,WAAW,WACpBC,IAAQC,QAAQ,4BAChBL,EAAUM,aAEdN,EAAUG,GAAG,SAAS,WAClBC,IAAQG,MAAM,4BACdP,EAAUM,eAIf,CAACd,IACEgB,EAAeX,uBAAY,SAACY,GAC9BhB,EAASgB,KACV,CAACjB,IACJ,OACI,sBAAKkB,UAAU,YAAf,UACI,cAAC,IAAD,CAAQC,GAAG,WAAWC,MAAO,CAAEC,aAAc,QAAUC,KAAK,UAAUC,QAASnB,EAA/E,8BACA,qBAAKe,GAAG,UAAUC,MAAO,CAAEI,QAAS,UACpC,cAAC,IAAD,CACIC,IAAKvB,EAAewB,MAAM,OAAO1B,MAAOA,EAAO2B,SAAUX,Q,SCtClEY,G,OAAWC,IAAXD,SAoBQE,MAnBf,WACE,MAAsB/B,mBAAS,KAA/B,mBAAOgC,EAAP,KAAYC,EAAZ,KACMhB,EAAeX,uBAAY,SAAC0B,GAChCC,EAAOD,KACN,IACH,OACE,qBAAKb,UAAU,MAAf,SACE,eAAC,IAAD,CAAMA,UAAU,gBAAgBe,iBAAkBF,EAAKJ,SAAUX,EAAjE,UACE,cAACY,EAAD,CAASM,IAAI,uCAAb,SACA,cAAC,EAAD,KAD0B,KAG1B,cAACN,EAAD,CAASM,IAAI,6BAAb,SACF,cAAC,IAAD,KADiC,WCNxBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,SAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6d5d4941.chunk.js","sourcesContent":["import RichTextEditor from \"./components/rich-text-editor\"\nexport default RichTextEditor","import React, { useState } from 'react'\nimport { useRef } from 'react';\nimport ReactQuill from 'react-quill';\nimport { Button, message } from \"antd\"\nimport Clipboard from 'clipboard';\nimport 'react-quill/dist/quill.snow.css';\nimport \"./style.css\"\nimport { useCallback } from 'react';\n// 富文本的插件\nexport default function Index() {\n    const [value, setValue] = useState<string>('');\n    const reactQuillRef = useRef<any>(null)\n    const handleGetHTML = useCallback((e) => {\n\n        let html: string = `\n        <div class=\"ql-container ql-snow\">\n        <div class=\"ql-editor\">\n        ${value}\n        </div\n        ></div>`\n        let clipboard = new Clipboard(\"#copy-btn\", {\n            text: function (): string {\n                return html\n            },\n        })\n        clipboard.on(\"success\", function () {\n            message.success(\"复制成功\")\n            clipboard.destroy()\n        })\n        clipboard.on(\"error\", function () {\n            message.error(\"复制失败\")\n            clipboard.destroy()\n\n        })\n\n    }, [value])\n    const handleChange = useCallback((val) => {\n        setValue(val)\n    }, [value])\n    return (\n        <div className=\"container\">\n            <Button id=\"copy-btn\" style={{ marginBottom: \"15px\" }} type=\"primary\" onClick={handleGetHTML}>复制HTML</Button>\n            <div id=\"toolbar\" style={{ display: \"none\" }}></div>\n            <ReactQuill\n                ref={reactQuillRef} theme=\"snow\" value={value} onChange={handleChange} />\n        </div>\n    )\n}\n","// import MarkdownEditor from \"./packages/md-react/index.js\"\nimport MarkdownEditor from \"md-react-best\";\nimport RichTextEditor from \"./packages/rich-text-editor/src/index.ts\"\nimport { Tabs } from \"antd\";\nimport \"./App.css\";\nimport { useCallback, useState } from \"react\";\nconst {TabPane} = Tabs\nfunction App() {\n  const [key, setKey] = useState(\"1\")\n  const handleChange = useCallback((key) => {\n    setKey(key)\n  }, [])\n  return (\n    <div className=\"App\">\n      <Tabs className=\"tab-container\" defaultActiveKey={key} onChange={handleChange}>\n        <TabPane tab=\"富文本编辑器\" key=\"1\">\n        <RichTextEditor></RichTextEditor>\n        </TabPane>\n        <TabPane tab=\"Markdown编辑器\" key=\"2\">\n      <MarkdownEditor></MarkdownEditor>\n        </TabPane>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.Suspense>\n    <App />\n  </React.Suspense>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}